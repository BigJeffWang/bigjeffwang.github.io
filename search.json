[{"title":"Linux 下安装 Sublime Text3 配置Markdown 和 python插件 完美解决不能中文输入","url":"http://yoursite.com/2017/06/13/Linux 下安装 Sublime Text3 配置Markdown 和 python插件 完美解决不能中文输入/","content":"<h1>目录:</h1>\n\n<p>[TOC]</p>\n<h1 id=\"1-安装sublime-text-3\"><a href=\"#1-安装sublime-text-3\" class=\"headerlink\" title=\"1. 安装sublime text 3\"></a>1. 安装sublime text 3</h1><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><h3 id=\"1-1-安装过程非常简单-在terminal中输入：\"><a href=\"#1-1-安装过程非常简单-在terminal中输入：\" class=\"headerlink\" title=\"1.1 安装过程非常简单,在terminal中输入：\"></a>1.1 安装过程非常简单,在terminal中输入：</h3><blockquote>\n<ol>\n<li>sudo add-apt-repository ppa:webupd8team/sublime-text-3 #添加sublime text 3的仓库</li>\n<li>sudo apt-get update #更新软件库</li>\n<li>sudo apt-get install sublime-text-installer #安装Sublime Text 3</li>\n</ol>\n</blockquote>\n<h3 id=\"1-2-使用\"><a href=\"#1-2-使用\" class=\"headerlink\" title=\"1.2 使用\"></a>1.2 使用</h3><p>在terminal中输入：</p>\n<blockquote>\n<p>subl</p>\n</blockquote>\n<h3 id=\"1-3-卸载\"><a href=\"#1-3-卸载\" class=\"headerlink\" title=\"1.3 卸载\"></a>1.3 卸载</h3><blockquote>\n<p>sudo apt-get remove sublime-text-installer</p>\n</blockquote>\n<h2 id=\"2-安装插件\"><a href=\"#2-安装插件\" class=\"headerlink\" title=\"2. 安装插件\"></a>2. 安装插件</h2><h3 id=\"2-1-安装-Package-Control-插件管理器\"><a href=\"#2-1-安装-Package-Control-插件管理器\" class=\"headerlink\" title=\"2.1 安装 Package Control 插件管理器\"></a>2.1 安装 Package Control 插件管理器</h3><ol>\n<li><p>从 Sublime Text 3 官方获取用于安装的代码。(<a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"external\">地址请点击这里</a>)<br>1.1 或者从这里粘贴</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure>\n</li>\n<li><p>在sublime text 3的窗口上方,依次点击 View &gt; Show Console 打开的控制台<br>2.1 <img src=\"http://upload-images.jianshu.io/upload_images/6298250-c41275ef170235a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"><br>2.2 <img src=\"http://upload-images.jianshu.io/upload_images/6298250-19b2b5daa1725ae3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n</li>\n<li>把刚才从官网粘贴的代码,复制到控制台的输入框里,并回车</li>\n<li>其他一些相关命令如下：<br>List Packages 显示所有已安装的插件<br>Remove Packages 移除一个指定的插件<br>Upgrade Package 更新一个指定的插件<br>Upgrade/Overwrite All Packages 更新所有已安装的插件</li>\n</ol>\n<h3 id=\"2-2-安装anaconda插件\"><a href=\"#2-2-安装anaconda插件\" class=\"headerlink\" title=\"2.2 安装anaconda插件\"></a>2.2 安装anaconda插件</h3><p>####2.2.1 介绍<br>Anaconda 是一个终极 <a href=\"http://lib.csdn.net/base/python\" target=\"_blank\" rel=\"external\">Python</a> 插件。它为 ST3 增添了多项 IDE 类似的功能，例如：</p>\n<ul>\n<li>Autocompletion 自动完成，该选项默认开启，同时提供多种配置选项。</li>\n<li>Code linting 使用支持 pep8 标准的 PyLint 或者 PyFlakes。因为我个人使用的是另外的 linting 工具，所以我会在 Anaconda 的配置文件 Anaconda.sublime-settings 中将 linting 完全禁用。操作如下: Sublime &gt; Preferences &gt; Package Settings &gt; Anaconda &gt; Settings – User： {“anaconda_linting”: false}</li>\n<li>McCabe code complexity checker 让你可以在特定的文件中使用 McCabe complexity checker. 如果你对软件复杂度检查工具不太熟悉的话，请务必先浏览上边的链接。</li>\n<li>Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数，或者类的定义。</li>\n<li>Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。</li>\n<li>Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)</li>\n</ul>\n<p>####2.2.2 anaconda安装<br>快捷键 cmd+shift+P 打开 Package Control 来安装其他的插件了。输入 install 然后你就能看见屏幕上出现了 Package Control: Install Package，点击回车然后搜索你想要的插件</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-a483d49c60a69ad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>点击Anaconda安装,当然我已经装过了,所以列表里,没有.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-bcb2465246401a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>####2.2.3 配置</p>\n<ol>\n<li>打开终端输入<blockquote>\n<p>whereis python</p>\n</blockquote>\n</li>\n<li>选择Preferences-Package Settings-Anacoda-Settings-Default选项，搜寻“python_interpreter” ， 并将“python_interpreter”：”Python” 改为“python_interpreter”：”/usr/bin/python2.7” (这里根据第一步显示的结果)<br>2.1 如图:<img src=\"http://upload-images.jianshu.io/upload_images/6298250-67d8e5f2052b1b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></li>\n<li><p>选择Preferences-Package Settings-Anacoda-Settings-Users选项，键入以下json数据。保存，重启ST3即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    &quot;python_interpreter&quot;: &quot;/usr/bin/python2.7&quot;,</div><div class=\"line\">    &quot;suppress_word_completions&quot;: true,</div><div class=\"line\">    &quot;suppress_explicit_completions&quot;: true,</div><div class=\"line\">    &quot;complete_parameters&quot;: true,</div><div class=\"line\">    &quot;anaconda_linting&quot;:false</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试,接下来，就会发现，ST3编写python代码时会有提示功能。 </p>\n</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-d8f6faf5886b60ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"2-3-安装Markdown用到的插件和编译器中文汉化插件\"><a href=\"#2-3-安装Markdown用到的插件和编译器中文汉化插件\" class=\"headerlink\" title=\"2.3 安装Markdown用到的插件和编译器中文汉化插件\"></a>2.3 安装Markdown用到的插件和编译器中文汉化插件</h3><p><a href=\"http://www.jianshu.com/p/aa30cc25c91b\" target=\"_blank\" rel=\"external\">这里有一篇,写的很详细,可以点击看看</a></p>\n<ul>\n<li><strong>打开sublime txt3&gt;Ctrl+shift+P &gt; install Package &gt; 复制以下插件名即可安装</strong>:</li>\n<li><strong>Chinese</strong> : <strong>汉化!</strong>喜欢用英文的,建议不装!</li>\n<li><a href=\"https://github.com/SublimeText-Markdown/MarkdownEditing\" target=\"_blank\" rel=\"external\">MarkDown Editing</a> : 支持Markdown语法高亮；支持Github Favored Markdown语法；自带3个主题。</li>\n<li><a href=\"https://github.com/revolunet/sublimetext-markdown-preview\" target=\"_blank\" rel=\"external\">MarkdownPreview</a>：按CTRL + B 生成网页HTML；在最前面添加[TOC]自动生成目录；</li>\n<li><a href=\"http://theo.im/OmniMarkupPreviewer/\" target=\"_blank\" rel=\"external\">OmniMarkupPreviwer</a>：<strong>实时</strong>在浏览器中预，而MarkdownPreview是需要手动生成的和F5的。览如果双屏的话，应该具有不错的体验。快捷键如下：<ul>\n<li>Ctrl+Alt+O: Preview Markup in Browser. 这个非常有用!!!</li>\n<li>Ctrl+Alt+X: Export Markup as HTML.</li>\n<li>Ctrl+Alt+C: Copy Markup as HTML.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/naokazuterada/MarkdownTOC\" target=\"_blank\" rel=\"external\">Markdown TOC</a>：编辑MD文件的时候可以查看自动生成，并且可以控制生产目录的层次，不过不会自动跳转。编辑的时候可以看看，如果需要生成的HTML具有超链接跳转的功能，还是用MarkdownPreview吧。<br><strong>Sublime Text 系列</strong><br><a href=\"http://www.jianshu.com/p/d1b9a64e2e37\" target=\"_blank\" rel=\"external\">Sublime Text：学习资源篇</a><br><a href=\"http://www.jianshu.com/p/5905f927d01b\" target=\"_blank\" rel=\"external\">Sublime插件：增强篇</a><br><a href=\"http://www.jianshu.com/p/aa30cc25c91b\" target=\"_blank\" rel=\"external\">Sublime插件：Markdown篇</a><br><a href=\"http://www.jianshu.com/p/595975a2a5f3\" target=\"_blank\" rel=\"external\">Sublime插件：C语言篇</a><br><a href=\"http://www.jianshu.com/p/13fedee165f1\" target=\"_blank\" rel=\"external\">Sublime插件：主题篇</a><br><a href=\"http://www.jianshu.com/p/3a8555c273d8\" target=\"_blank\" rel=\"external\">Sublime插件：Git篇</a><br><a href=\"http://www.jianshu.com/p/c75d21d2e967\" target=\"_blank\" rel=\"external\">Sublime 小技巧：文本自动换行显示？</a></li>\n</ul>\n<h1 id=\"2-相对的完美解决汉化问题\"><a href=\"#2-相对的完美解决汉化问题\" class=\"headerlink\" title=\"2. 相对的完美解决汉化问题\"></a>2. 相对的完美解决汉化问题</h1><p><em>本经验目前在Ubuntu14.04环境下，已有搜狗输入法 for Linux和Sublime Text 3的情况下安装成功。</em><br>步骤:</p>\n<ol>\n<li>安装 C/C++ 的编译环境和 gtk libgtk2.0-dev<blockquote>\n<ol>\n<li>sudo apt-get install build-essential</li>\n<li>sudo apt-get install libgtk2.0-dev</li>\n</ol>\n</blockquote>\n</li>\n<li><p>保存下面的代码到文件sublime_imfix.c(位于~目录)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;gtk/gtkimcontext.h&gt;</div><div class=\"line\">void gtk_im_context_set_client_window (GtkIMContext *context,</div><div class=\"line\">         GdkWindow    *window)</div><div class=\"line\">&#123;</div><div class=\"line\"> GtkIMContextClass *klass;</div><div class=\"line\"> g_return_if_fail (GTK_IS_IM_CONTEXT (context));</div><div class=\"line\"> klass = GTK_IM_CONTEXT_GET_CLASS (context);</div><div class=\"line\"> if (klass-&gt;set_client_window)</div><div class=\"line\">   klass-&gt;set_client_window (context, window);</div><div class=\"line\"> g_object_set_data(G_OBJECT(context),&quot;window&quot;,window);</div><div class=\"line\"> if(!GDK_IS_WINDOW (window))</div><div class=\"line\">   return;</div><div class=\"line\"> int width = gdk_window_get_width(window);</div><div class=\"line\"> int height = gdk_window_get_height(window);</div><div class=\"line\"> if(width != 0 &amp;&amp; height !=0)</div><div class=\"line\">   gtk_im_context_focus_in(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>将上一步的代码编译成共享库libsublime-imfix.so，命令</p>\n<blockquote>\n<ol>\n<li>cd ~</li>\n<li>gcc -shared -o libsublime-imfix.so sublime_imfix.c  <code>pkg-config --libs --cflags gtk+-2.0</code> -fPIC</li>\n</ol>\n</blockquote>\n</li>\n<li>然后将libsublime-imfix.so拷贝到sublime_text所在文件夹<blockquote>\n<p>sudo mv libsublime-imfix.so /opt/sublime_text/</p>\n</blockquote>\n</li>\n<li><p>修改文件/usr/bin/subl的内容</p>\n<blockquote>\n<ol>\n<li>sudo gedit /usr/bin/subl</li>\n<li>将源文件修改<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\#!/bin/sh </div><div class=\"line\">exec /opt/sublime_text/sublime_text &quot;$@&quot;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>修改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\#!/bin/sh</div><div class=\"line\">export LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so</div><div class=\"line\">exec /opt/sublime_text/sublime_text &quot;$@&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>此时，在命令中执行 subl 将可以使用搜狗for linux的中文输入</p>\n</li>\n<li>为了使用鼠标右键打开文件时能够使用中文输入，还需要修改文件sublime_text.desktop的内容。<ol>\n<li><blockquote>\n<p>sudo gedit /usr/share/applications/sublime_text.desktop<br>将[Desktop Entry]中的字符串<br>Exec=/opt/sublime_text/sublime_text %F<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec  /opt/sublime_text/sublime_text %F”</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>将[Desktop Action Window]中的字符串<br>Exec=/opt/sublime_text/sublime_text -n<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec   /opt/sublime_text/sublime_text -n”</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>将[Desktop Action Document]中的字符串<br>Exec=/opt/sublime_text/sublime_text –command new_file<br>修改为<br>Exec=bash -c “LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec   /opt/sublime_text/sublime_text –command new_file”</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>注意：<br>修改时请注意双引号””,否则会导致不能打开带有空格文件名的文件。<br>此处仅修改了/usr/share/applications/sublime-text.desktop，但可以正常使用了。<br>opt/sublime_text/目录下的sublime-text.desktop可以修改，也可不修改。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p><strong>经过以上步骤我们能在Sublime中输入中文了。如果感觉对你有帮助的话,请给我点个赞或分享给他人</strong></p>\n<p>分销几个别人总结的Markdown的文章:</p>\n<ul>\n<li><a href=\"(http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C#title-5)\">Markdown 语法手册 （完整整理版）</a></li>\n<li><a href=\"(http://www.appinn.com/markdown/#header)\">Markdown 语法说明 (简体中文版)</a></li>\n<li></li>\n</ul>\n","categories":[],"tags":[]},{"title":"Selenium 2 自动化测试实例","url":"http://yoursite.com/2017/06/13/Selenium 2 自动化测试实例/","content":"<p>Selenium 2 自动化测试实例 更新中…</p>\n<p>目录:</p>\n<p>[TOC]</p>\n<h1 id=\"1-自动化测试基础\"><a href=\"#1-自动化测试基础\" class=\"headerlink\" title=\"1. 自动化测试基础\"></a>1. 自动化测试基础</h1><h2 id=\"1-1-软件测试分类\"><a href=\"#1-1-软件测试分类\" class=\"headerlink\" title=\"1.1 软件测试分类\"></a>1.1 软件测试分类</h2><h3 id=\"1-根据项目流程阶段划分测试\"><a href=\"#1-根据项目流程阶段划分测试\" class=\"headerlink\" title=\"1. 根据项目流程阶段划分测试\"></a>1. 根据项目流程阶段划分测试</h3><ol>\n<li>单元测试: 单个子程序测试</li>\n<li>集成测试: 模块由多个单元集成成子系统再测试</li>\n<li>系统测试: 针对整个产品系统的测试</li>\n<li>验收测试: 部署软件之前的最后一个测试阶段</li>\n</ol>\n<h3 id=\"2-白盒测试、黑盒测试、灰盒测试\"><a href=\"#2-白盒测试、黑盒测试、灰盒测试\" class=\"headerlink\" title=\"2. 白盒测试、黑盒测试、灰盒测试\"></a>2. 白盒测试、黑盒测试、灰盒测试</h3><ol>\n<li>黑盒：只关心软件的输入数据和输出结果</li>\n<li>白盒：产品内部动作和代码逻辑是否按照设计规格进行</li>\n<li>灰盒：介于黑盒和白盒之间，既关注输入输出的正确性，同时也关注内部的表现</li>\n</ol>\n<h3 id=\"3-功能测试和性能测试\"><a href=\"#3-功能测试和性能测试\" class=\"headerlink\" title=\"3. 功能测试和性能测试\"></a>3. 功能测试和性能测试</h3><ol>\n<li>功能测试：逻辑功能测试、界面测试、易用性测试、安装测试、兼容性测试等等</li>\n<li>性能测试：<ul>\n<li>时间性能：具体响应时间</li>\n<li>空间性能：消耗占用系统资源，例如硬件资源，CPU、内存、网络带宽消耗等</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-手工测试与自动化测试\"><a href=\"#4-手工测试与自动化测试\" class=\"headerlink\" title=\"4. 手工测试与自动化测试\"></a>4. 手工测试与自动化测试</h3><ol>\n<li>手工测试：由测试人员一个一个地去执行测试用例</li>\n<li>自动化测试：把人为驱动的测试行为转化为机器执行的一种过程<ul>\n<li>功能自动化测试：测试工具（或者框架）录制/编写测试脚本，对软件的功能进行测试，并验证测试结果是否正确，从而替代部分手工测试工作，达到节约时间成本、人力成本</li>\n<li>性能自动化测试：通过性能工具来模拟成千上万的虚拟用户向系统发送请求，具而验证系统的处理能力</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-冒烟测试、回归测试、随机测试、探索型测试和安全测试\"><a href=\"#5-冒烟测试、回归测试、随机测试、探索型测试和安全测试\" class=\"headerlink\" title=\"5. 冒烟测试、回归测试、随机测试、探索型测试和安全测试\"></a>5. 冒烟测试、回归测试、随机测试、探索型测试和安全测试</h3><ol>\n<li>冒烟测试：先验证具体的基本功能是否实现，是否具备进行大规模系统测试</li>\n<li>回归测试：修改之后的旧代码，从新测试，检测有没有引进新的错误或者导致其他代码产生错误</li>\n<li>随机测试：输入数据是随机生成的，其目的是模拟用户的真实操作，并发现一些边缘型的错误</li>\n<li>探索性测试：一种测试思维方式，强调在碰到问题时及时改变测试策略        </li>\n</ol>\n<h2 id=\"1-2-分层的自动化测试\"><a href=\"#1-2-分层的自动化测试\" class=\"headerlink\" title=\"1.2 分层的自动化测试\"></a>1.2 分层的自动化测试</h2><p>测试金字塔的概念由敏捷大师 Mike Cohn 在他的 Succeeding with agile 一书中首次提出。<br>基本观念是：我们应该有更多的低级别的单元测试，而不仅仅是通过用户界面运行的端到端的测试。</p>\n<p>所谓传统的自动化测试我们可以理解为基于产品的UI层的自动化测试，它是将黑盒功能测试转化为由程序或者工具执行的一种自动化测试。<br>UI自动化测试成本维护高昂，UI易变。<br>分层自动化测试倡导的是由黑盒（UI）单层到黑白盒多层的自动化测试体系，从全面的黑盒自动化测试到对系统的不同曾次进行自动化测试。</p>\n<ol>\n<li>单元自动化测试<ul>\n<li>是指针对软件的最小可测试单元进行检查和验证。对于单元测试中的单元的含义，一般来说c语言是指一个函数，Java是指一个类，图形化软件是一个窗口或者菜单，需要用到测试框架。<ul>\n<li>Java：Junit、TestNG</li>\n<li>C#：NUnit</li>\n<li>python：unittest、pytest</li>\n</ul>\n</li>\n<li>Code Review 代码审查<ul>\n<li>Java：Eclipse的ReviewClipse和Jupiter</li>\n<li>python：Review Board</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>接口自动化测试<ul>\n<li>模块接口测试<ul>\n<li>测试模块之间的调用与返回，强调一个类方法或者函数的调用，并对返回结果的验证，同单元自动化测试</li>\n</ul>\n</li>\n<li>Web接口测试<ul>\n<li>服务器接口测试：是指测试浏览器与服务器的接口，通过HTTP协议实现前后端的数据传递测试</li>\n<li>外部接口测试：指调用的接口由第三方系统提供，典型例子就是第三方登录，用户登录信息的验证由第三方完成，并返回给当前系统是否验证通过</li>\n</ul>\n</li>\n<li>当然，接口测试也有类库或者工具，例如测试HTTP的有HttpUnit、Postman等</li>\n</ul>\n</li>\n<li>UI自动化测试<ul>\n<li>UI测试工具：UFT、Watir、Robot Framework、Selenium</li>\n<li>前端：QUnit就是针对JavaScript的单元测试工具</li>\n</ul>\n</li>\n</ol>\n<p>《Google测试之道》 一书中提到，测试类型分为大、中、小测试，采用比例1:2:7，大体对应UI层、Service、Unit  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">UI层</th>\n<th style=\"text-align:center\">Service</th>\n<th style=\"text-align:center\">Unit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">大</td>\n<td style=\"text-align:center\">中</td>\n<td style=\"text-align:center\">小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10%</td>\n<td style=\"text-align:center\">20%</td>\n<td style=\"text-align:center\">70%</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"1-3-什么项目适合做自动化测试\"><a href=\"#1-3-什么项目适合做自动化测试\" class=\"headerlink\" title=\"1.3 什么项目适合做自动化测试\"></a>1.3 什么项目适合做自动化测试</h2><ol>\n<li>任务测试明确，不会频繁变动</li>\n<li>每日构建后的测试验证</li>\n<li>比较频繁的回归测试</li>\n<li>软件系统的界面稳定，变动少</li>\n<li>需要在多平台上运行的测试案例，组合便利型的测试，大量的重复任务</li>\n<li>软件维护周期长</li>\n<li>项目进度压力不算太大</li>\n<li>被测软件系统开发较为规范，能够保证系统的可测试性</li>\n<li>具备大量的自动化测试平台</li>\n<li>测试人员较强的变成能力</li>\n</ol>\n<h2 id=\"1-4-市面上常见的自动化测试工具\"><a href=\"#1-4-市面上常见的自动化测试工具\" class=\"headerlink\" title=\"1.4 市面上常见的自动化测试工具\"></a>1.4 市面上常见的自动化测试工具</h2><ol>\n<li>UFT：HP开发，QTP与ST合并而来。企业级自测工具，提供强大医用的录制回放功能，兼容对象识别模式与图像识别模式两种识别方式，支持B/S C/S两种架构</li>\n<li>Robot Framework：基于Python编写的自动化测试框架，可扩展，支持关键字，同时可以测试多种客户端或者接口，可以分布式测试</li>\n<li>Watir：基于Web模式的自动化功能测试工具。Wair是一个Ruby语言库</li>\n<li>Selenium：是一个Web应用程序测试工具，支持多平台、多浏览器、多语言，应用广泛</li>\n</ol>\n<h2 id=\"1-5-Selenium工具介绍\"><a href=\"#1-5-Selenium工具介绍\" class=\"headerlink\" title=\"1.5 Selenium工具介绍\"></a>1.5 Selenium工具介绍</h2><p>基于Web应用程序的自动化测试，但不局限于此，它还支持所有基于web的管理任务自动化</p>\n<p>特点：</p>\n<ul>\n<li>开源免费</li>\n<li>多浏览器支持：Firefox、Chrome、IE、Opera、Edge</li>\n<li>多平台支持：Linux、windows、Mac</li>\n<li>多语言：Java、Python、Ruby、JavaScript、C#、C++</li>\n<li>对web页面的良好的支持</li>\n<li>简单API、灵活（用开发语言驱动）</li>\n<li>支持分布式测试用例</li>\n</ul>\n<p>Selenium：</p>\n<ul>\n<li>Selenium IDE：嵌入火狐Firefox的一个插件，实现简单的浏览器操作录制、回放，快速创建bug重现脚本，通过IDE将重现的步骤记录下来，重现BUG</li>\n<li>Selenium Grid：自动化测试辅助工具，Grid通过利用现有的计算机基础设施，能加快Web-App的功能测试，利用Grid可以很方便的实现多台机器上和异构环境中测试用例</li>\n<li>Selenium RC：家族的核心部分，通过Selenium RC的服务器作为代理服务器去访问应用。Selenium Libraries库主要用于编写测试脚本，用来控制Selenium Server库。Selenium Server负责控制浏览器行为。<ul>\n<li>client</li>\n<li>Server<ul>\n<li>Launcher：用于启动浏览器，把Selenium Core加载到浏览器页面当中，并把浏览器的代理设置为Selenium Server的Http Proxy</li>\n<li>Http Proxy：代理服务器(Proxy)是网络信息的中转站</li>\n<li>Core：是被Selenium Server嵌入到到浏览器的页面中，其实 Selenium Core就是一堆JavaScript函数的集合，通过这些JS函数，可以实现程序对浏览器的操作</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Selenium 2.0 = Selenium 1.0 + WebDriver<br>WebDriver是Selenium RC的替代品，为了保持向下兼容，并没有完全抛弃 Selenium Core，新的项目可以直接使用WebDriver</p>\n<ul>\n<li>Selenium RC：是在浏览器中运行JS脚本，使用浏览器内置的JS的编译器来翻译和执行selenese（selenese是Selenium命令合集）</li>\n<li>WebDriver：是通过原生浏览器支持或者浏览器扩展来直接控制浏览器。WebDriver针对各个浏览器而开发，取代了嵌入到被测Web应用中的JavaScript，与浏览器紧密集成，因此支持创建更高级的测试，便面的JavaScript安全模型导致的限制，还利用操作系统级别的调用，模拟用户输入。可以绕过JavaScript沙箱</li>\n</ul>\n<h2 id=\"1-6-前端技术介绍\"><a href=\"#1-6-前端技术介绍\" class=\"headerlink\" title=\"1.6 前端技术介绍\"></a>1.6 前端技术介绍</h2><ol>\n<li>HTML</li>\n<li>JavaScript</li>\n<li>XML</li>\n</ol>\n<h2 id=\"1-7-前端工具介绍\"><a href=\"#1-7-前端工具介绍\" class=\"headerlink\" title=\"1.7 前端工具介绍\"></a>1.7 前端工具介绍</h2><ol>\n<li>FireBug</li>\n<li>FirePath：快速检查和生成XPath1.0表达式</li>\n<li>Chrome、IE</li>\n</ol>\n<h2 id=\"1-8-开发语言选择\"><a href=\"#1-8-开发语言选择\" class=\"headerlink\" title=\"1.8 开发语言选择\"></a>1.8 开发语言选择</h2><p>本文选择的是Python</p>\n<h1 id=\"2-测试环境搭建\"><a href=\"#2-测试环境搭建\" class=\"headerlink\" title=\"2. 测试环境搭建\"></a>2. 测试环境搭建</h1><h2 id=\"2-1-Windows下的环境搭建\"><a href=\"#2-1-Windows下的环境搭建\" class=\"headerlink\" title=\"2.1 Windows下的环境搭建\"></a>2.1 Windows下的环境搭建</h2><h3 id=\"2-1-1-安装Python\"><a href=\"#2-1-1-安装Python\" class=\"headerlink\" title=\"2.1.1 安装Python\"></a>2.1.1 安装Python</h3><h3 id=\"2-1-2-安装setuptools与pip\"><a href=\"#2-1-2-安装setuptools与pip\" class=\"headerlink\" title=\"2.1.2 安装setuptools与pip\"></a>2.1.2 安装setuptools与pip</h3><h3 id=\"2-1-3-安装Selenium\"><a href=\"#2-1-3-安装Selenium\" class=\"headerlink\" title=\"2.1.3 安装Selenium\"></a>2.1.3 安装Selenium</h3><h3 id=\"2-1-4-ActivePython\"><a href=\"#2-1-4-ActivePython\" class=\"headerlink\" title=\"2.1.4 ActivePython\"></a>2.1.4 ActivePython</h3><ul>\n<li>Python专用编程和调试工具，包含Python内核，同时可以访问Windows API的所有服务</li>\n<li>集成PIP，可以用PIP安装Selenium库</li>\n</ul>\n<h2 id=\"2-2-Ubuntu下环境搭建\"><a href=\"#2-2-Ubuntu下环境搭建\" class=\"headerlink\" title=\"2.2 Ubuntu下环境搭建\"></a>2.2 Ubuntu下环境搭建</h2><h2 id=\"2-3-使用IDLE编写Python\"><a href=\"#2-3-使用IDLE编写Python\" class=\"headerlink\" title=\"2.3 使用IDLE编写Python\"></a>2.3 使用IDLE编写Python</h2><h2 id=\"2-4-编写第一个自动化脚本\"><a href=\"#2-4-编写第一个自动化脚本\" class=\"headerlink\" title=\"2.4 编写第一个自动化脚本\"></a>2.4 编写第一个自动化脚本</h2><p>在执行程序的时候，如果遇到错误代码是如下样子：  </p>\n<blockquote>\n<p>selenium.common.exceptions.WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH.   </p>\n</blockquote>\n<p>则需要下载 geckodriver驱动文件，放在/usr/local/bin目录里。<br>下载网址是：<a href=\"https://github.com/mozilla/geckodriver/releases/\" target=\"_blank\" rel=\"external\">https://github.com/mozilla/geckodriver/releases/</a><br>如果是Linux系统，下载文件名是：geckodriver-v0.16.1-linux64.tar.gz （最新版本即可）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from time import sleep</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.get(&quot;http://www.baidu.com&quot;)</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;Selenium2&quot;)</div><div class=\"line\">driver.find_element_by_id(&quot;su&quot;).click()</div><div class=\"line\"></div><div class=\"line\">sleep(5)</div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h2 id=\"2-5-安装浏览器驱动\"><a href=\"#2-5-安装浏览器驱动\" class=\"headerlink\" title=\"2.5 安装浏览器驱动\"></a>2.5 安装浏览器驱动</h2><p>地址：<a href=\"http://www.seleniumhq.org/download\" target=\"_blank\" rel=\"external\">Selenium - Web Browser Automation</a></p>\n<p>如果打不开，百度搜索相应的驱动。安装位置，Windows安装在path环境变量下，Linux安装在/usr/local/bin<br><a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-expert-selenium-ide/\" target=\"_blank\" rel=\"external\">FireFoxdriver地址</a><br><a href=\"http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip\" target=\"_blank\" rel=\"external\">Chromedriver地址</a><br><a href=\"http://selenium-release.storage.googleapis.com/index.html\" target=\"_blank\" rel=\"external\">IEdriver地址</a> 需要对应你的Selenium版本  <a href=\"http://blog.csdn.net/jichuang123/article/details/53008581\" target=\"_blank\" rel=\"external\">windows下 IEDriver相关设置</a><br><a href=\"https://pypi.python.org/pypi/HTMLTestRunner\" target=\"_blank\" rel=\"external\">HTMLTestRunner.py地址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install xvfb</div><div class=\"line\">sudo apt-get install unzip</div><div class=\"line\"></div><div class=\"line\">wget -N http://chromedriver.storage.googleapis.com/2.26/chromedriver_linux64.zip</div><div class=\"line\">unzip chromedriver_linux64.zip</div><div class=\"line\">chmod +x chromedriver</div><div class=\"line\"></div><div class=\"line\">sudo mv -f chromedriver /usr/local/share/chromedriver</div><div class=\"line\">sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver</div><div class=\"line\">sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver</div></pre></td></tr></table></figure>\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-expert-selenium-ide/\" target=\"_blank\" rel=\"external\">FireFox驱动地址</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">selenium官方加上第三方宣布支持的驱动有很多种；除了PC端的浏览器之外，还支持iphone、Android的driver；大概记录一下selenium支持的各种driver的用途与说明。</div><div class=\"line\">selenium可支持的PC浏览器驱动包括：</div><div class=\"line\">FF driver【包含在各自语言的客户端里】</div><div class=\"line\">safari driver【包含在selenium server中】</div><div class=\"line\">ie driver</div><div class=\"line\">chrome driver 【第三方】</div><div class=\"line\">opera driver【第三方】</div><div class=\"line\"></div><div class=\"line\">selenium可支持的伪浏览器驱动：</div><div class=\"line\">PhantomJS Driver【第三方】</div><div class=\"line\">HtmlUnit Driver【包含在selenium server中】</div><div class=\"line\"></div><div class=\"line\">selenium可支持的移动端驱动：</div><div class=\"line\">Windows Phone driver 【第三方】</div><div class=\"line\">Selendroid -Selenium for android【第三方】</div><div class=\"line\">ios-driver 【第三方】</div><div class=\"line\">Appium  支持iphone、ipad、android、FirefoxOS【第三方】</div><div class=\"line\">上述的所有驱动不仅可以直接通过各自语言客户端来调用，还是注册到selenium grid中进行分布式的远程调用。</div><div class=\"line\"></div><div class=\"line\">因为移动端的driver都没有尝试过，所以就不做说明。PC端的driver都是基于浏览器的，主要分为2种类型：</div><div class=\"line\">一种是真实的浏览器driver</div><div class=\"line\">比如：safari、ff都是以插件形式驱动浏览器本身的；ie、chrome都是通过二进制文件来驱动浏览器本身的；</div><div class=\"line\">这些driver都是直接启动并通过调用浏览器的底层接口来驱动浏览器的，因此具有最真实的用户场景模拟，主要用于进行web的兼容性测试使用。</div><div class=\"line\"></div><div class=\"line\">一种是伪浏览器driver</div><div class=\"line\">selenium支持的伪浏览器包括htmlunit、PhantomJS；他们都不是真正的在浏览器、都没有GUI，而是具有支持html、js等解析能力的类浏览器程序；这些程序不会渲染出网页的显示内容，但是支持页面元素的查找、JS的执行等；由于不进行css及GUI渲染，所以运行效率上会比真实浏览器要快很多，主要用在功能性测试上面。</div><div class=\"line\">htmlunit是Java实现的类浏览器程序，包含在selenium server中，无需驱动，直接实例化即可；其js的解析引擎是Rhino</div><div class=\"line\">PhantomJS是第三方的一个独立类浏览器应用，可以支持html、js、css等执行；其驱动是Ghost driver在1.9.3版本之后已经打包进了主程序中，因此只要下载一个主程序即可；其js的解析引擎是chrome 的V8。</div><div class=\"line\"></div><div class=\"line\">driver类型\t优点\t缺点\t应用</div><div class=\"line\">真实浏览器driver\t真实模拟用户行为\t效率、稳定性低\t兼容性测试</div><div class=\"line\">HtmlUnit\t速度快\tjs引擎不是主流的浏览器支持的\t包含少量js的页面测试</div><div class=\"line\">PhantomJS\t速度中等、模拟行为接近真实\t不能模拟不同/特定浏览器的行为\t非GUI的功能性测试</div><div class=\"line\">PS：除上述的几种真实浏览器driver中，也可以通过不同的手段来取消浏览器的css解析、界面渲染等目的；这样既可以保证浏览器的真实兼容性、也可以提高执行效率问题；使用的手段有：autoit、pyvirtualdisplay、浏览器设置等。</div></pre></td></tr></table></figure>\n<h2 id=\"2-6-不同语言使用WebDriver\"><a href=\"#2-6-不同语言使用WebDriver\" class=\"headerlink\" title=\"2.6 不同语言使用WebDriver\"></a>2.6 不同语言使用WebDriver</h2><ul>\n<li>导入selenium（WebDriver）相关模块</li>\n<li>调用浏览器驱动，获取浏览器句柄，并启动</li>\n<li>通过句柄访问地址百度</li>\n<li>通过句柄操作页面元素（百度输入框和按钮）</li>\n<li>通过句柄关闭浏览器</li>\n</ul>\n<h1 id=\"3-Python基础\"><a href=\"#3-Python基础\" class=\"headerlink\" title=\"3. Python基础\"></a>3. Python基础</h1><h2 id=\"3-1-Python哲学\"><a href=\"#3-1-Python哲学\" class=\"headerlink\" title=\"3.1 Python哲学\"></a>3.1 Python哲学</h2><h2 id=\"3-2-输入输出\"><a href=\"#3-2-输入输出\" class=\"headerlink\" title=\"3.2 输入输出\"></a>3.2 输入输出</h2><h2 id=\"3-3-分支与循环\"><a href=\"#3-3-分支与循环\" class=\"headerlink\" title=\"3.3 分支与循环\"></a>3.3 分支与循环</h2><h2 id=\"3-4-数组与字典\"><a href=\"#3-4-数组与字典\" class=\"headerlink\" title=\"3.4 数组与字典\"></a>3.4 数组与字典</h2><h2 id=\"3-5-函数、类和方法\"><a href=\"#3-5-函数、类和方法\" class=\"headerlink\" title=\"3.5 函数、类和方法\"></a>3.5 函数、类和方法</h2><h2 id=\"3-6-模组、类库、模块\"><a href=\"#3-6-模组、类库、模块\" class=\"headerlink\" title=\"3.6 模组、类库、模块\"></a>3.6 模组、类库、模块</h2><p>当多个模块之间存在引用，模块内之间文件里的类存在继承和引用关系<br>需要在模块内创建一个空的<strong>init</strong>.py文件<br>当一个模块调用另一个模块的时候<br>用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import sys  </div><div class=\"line\">sys.path.append(&quot;./model&quot;)  # (model就是相应的被引用模块)  </div><div class=\"line\">from model import new_count</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-WebDriver-API\"><a href=\"#4-WebDriver-API\" class=\"headerlink\" title=\"4. WebDriver API\"></a>4. WebDriver API</h1><h2 id=\"4-1-从定位元素开始\"><a href=\"#4-1-从定位元素开始\" class=\"headerlink\" title=\"4.1 从定位元素开始\"></a>4.1 从定位元素开始</h2><p>WebDriver在Python中一个有8种方法找到页面元素：  </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">标签</th>\n<th style=\"text-align:left\">定位元素</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">id</td>\n<td style=\"text-align:left\">name</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">class name</td>\n<td style=\"text-align:left\">tag name</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">link text</td>\n<td style=\"text-align:left\">partial link text</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">xpath</td>\n<td style=\"text-align:left\">css selector</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find_element_by_id()</td>\n<td style=\"text-align:left\">find_element_by_name()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find_element_by_class_name()</td>\n<td style=\"text-align:left\">find_element_by_tag_name()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find_element_by_link_text()</td>\n<td style=\"text-align:left\">find_element_by_partial_link_text() 通过部分文字定位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find_element_by_xpath()</td>\n<td style=\"text-align:left\">find_element_by_css_selector()</td>\n</tr>\n</tbody>\n</table>\n<p>XPath定位：<br>绝对路径定位<br>find_element_by_xpath(“/html/body/div/div[2]/div/div/from/span/input”)</p>\n<p>利用元素属性定位：<br>find_element_by_xpath(“//input[@id=’kw’]”)<br>find_element_by_xpath(“//input[@name=’wd’]”)<br>find_element_by_xpath(“//input[@class=’s_ipt’]”)<br>find_element_by_xpath(“//*[@class=’s_ipt’]”)<br>find_element_by_xpath(“//input[@maxlength=’100’]”)<br>find_element_by_xpath(“//input[@autocomplete=’off’]”)<br>find_element_by_xpath(“//input[@type=’submit’]”)  </p>\n<p>层级与属性结合：<br>find_element_by_xpath(“//span[@class=’bg_s_ipt_wr’]/input”)<br>find_element_by_xpath(“//form[@id=’form’]/span/input”)</p>\n<p>使用逻辑运算符：<br>find_element_by_xpath(“//input[@id=’kw’ and @class=’su’]/span/input”)</p>\n<p>css定位<br>通过class属性定位：<br>find_element_by_css_selector(“.s_ipt”)<br>find_element_by_css_selector(“.bg s_btn”)</p>\n<p>通过id属性定位：<br>find_element_by_css_selector(“#kw”)<br>find_element_by_css_selector(“#su”)</p>\n<p>通过标签名定位：<br>find_element_by_css_selector(“input”)<br>find_element_by_css_selector(“span&gt;input”)</p>\n<p>通过属性定位：<br>find_element_by_css_selector(“[autocomplete=off]”)<br>find_element_by_css_selector(“[name=’kw’]”)<br>find_element_by_css_selector(“[type=’submit’]”)</p>\n<p>组合定位：<br>find_element_by_css_selector(“form.fm&gt;span&gt;input.s_ipt”)<br>find_element_by_css_selector(“form.fm&gt;span&gt;input#kw”)</p>\n<p>用by定位元素<br>略过。。</p>\n<h2 id=\"4-2-控制浏览器\"><a href=\"#4-2-控制浏览器\" class=\"headerlink\" title=\"4.2 控制浏览器\"></a>4.2 控制浏览器</h2><h2 id=\"4-3-元素控制\"><a href=\"#4-3-元素控制\" class=\"headerlink\" title=\"4.3 元素控制\"></a>4.3 元素控制</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">driver.set_window_size(480,800)</td>\n<td style=\"text-align:left\">控制浏览器宽400高800</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.get(url)</td>\n<td style=\"text-align:left\">获取url地址页面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.forward()</td>\n<td style=\"text-align:left\">前进</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.back()</td>\n<td style=\"text-align:left\">后退</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.quit()</td>\n<td style=\"text-align:left\">退出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.refresh()</td>\n<td style=\"text-align:left\">刷新页面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.find_element_by_css_selector(“#id”).clear()</td>\n<td style=\"text-align:left\">清除文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.find_element_by_css_selector(“#id”).send_keys(“abc”)</td>\n<td style=\"text-align:left\">模拟按键输入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.find_element_by_css_selector(“#id”).click()</td>\n<td style=\"text-align:left\">单击元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.find_element_by_css_selector(“#id”).submit()</td>\n<td style=\"text-align:left\">提交</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size = driver.find_element_by_css_selector(“#id”).size</td>\n<td style=\"text-align:left\">输入框的尺寸</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.find_element_by_css_selector(“#id”).text</td>\n<td style=\"text-align:left\">文本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.find_element_by_css_selector(“#id”).get_attribute()</td>\n<td style=\"text-align:left\">获取id、name、type其他任意属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">driver.find_element_by_css_selector(“#id”).is_displayed()</td>\n<td style=\"text-align:left\">返回元素结果是否可见</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4-4-鼠标事件\"><a href=\"#4-4-鼠标事件\" class=\"headerlink\" title=\"4.4 鼠标事件\"></a>4.4 鼠标事件</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">perform()</td>\n<td style=\"text-align:left\">执行所有ActionChains中储存的行为</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">context_click()</td>\n<td style=\"text-align:left\">右击</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double_click()</td>\n<td style=\"text-align:left\">双击</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">drag_and_drop()</td>\n<td style=\"text-align:left\">拖动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">move_to_element()</td>\n<td style=\"text-align:left\">鼠标悬停</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from selenium.webdriver.common.action_chains import ActionChains</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.get(&quot;https://www.baidu.com/&quot;)</div><div class=\"line\"># 定位右击的元素</div><div class=\"line\">right_click = driver.find_element_by_id(&quot;su&quot;)</div><div class=\"line\"># 执行右击操作</div><div class=\"line\">ActionChains(driver).context_click(right_click).perform()</div><div class=\"line\"></div><div class=\"line\"># 将浏览器句柄driver作为参数，传入ActionChains行动链</div><div class=\"line\"># context_click() 鼠标右击操作，需要传入元素定位</div><div class=\"line\"># perform() 可以理解为对所有行动操作列表的提交</div><div class=\"line\"># ActionChains(driver).move_to_element(above).perferm() 鼠标悬停</div><div class=\"line\"># ActionChains(driver).double_click(double_click).perferm() 鼠标双击</div><div class=\"line\"># element, target = driver.find_element_by_id(&quot;xx&quot;), driver.find_element_by_id(&quot;xx&quot;)</div><div class=\"line\"># ActionChains(driver).drag_and_drop(element, target).perferm() 鼠标拖放</div></pre></td></tr></table></figure>\n<h2 id=\"4-5-键盘事件\"><a href=\"#4-5-键盘事件\" class=\"headerlink\" title=\"4.5 键盘事件\"></a>4.5 键盘事件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from selenium.webdriver.common.keys import Keys</div><div class=\"line\">from time import sleep</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.get(&quot;https://www.baidu.com/&quot;)</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;seleniumm&quot;)</div><div class=\"line\"># driver.find_element_by_id(&quot;su&quot;).click()</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.BACK_SPACE)  # 回退 删除</div><div class=\"line\"></div><div class=\"line\"># driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.SPACE)  # 添加空格</div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(u&quot; &quot;)  # 添加空格</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(u&quot;教程&quot;)  # 添加文字</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.CONTROL, &apos;a&apos;)  # 输入框全选</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.CONTROL, &apos;x&apos;)  # 输入框剪切</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.CONTROL, &apos;v&apos;)  # 输入框复制</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.ENTER)  # 回车代替单击</div><div class=\"line\"></div><div class=\"line\">sleep(5)</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<p>常用键盘操作：<br>操作|效果<br>:-|:-<br>send_keys(Keys.BACK_SPACE)|删除<br>send_keys(Keys.SPACE)|空格<br>send_keys(Keys.TAB)|制表符<br>send_keys(Keys.ESCAPE)|回退<br>send_keys(Keys.ENTER)|回车<br>send_keys(Keys.CONTROL, ‘a’)|全选<br>send_keys(Keys.CONTROL, ‘c’)|复制<br>send_keys(Keys.CONTROL, ‘v’)|粘贴<br>send_keys(Keys.CONTROL, ‘x’)|剪切<br>send_keys(Keys.F1)|键盘F1<br>send_keys(Keys.F12)|键盘F12</p>\n<h2 id=\"4-6-获取验证信息\"><a href=\"#4-6-获取验证信息\" class=\"headerlink\" title=\"4.6 获取验证信息\"></a>4.6 获取验证信息</h2><p>title = driver.title<br>now_url = driver.current_url<br>user = driver.find_element_by_id(‘spanUid’).text</p>\n<h2 id=\"4-7-设置元素等待\"><a href=\"#4-7-设置元素等待\" class=\"headerlink\" title=\"4.7 设置元素等待\"></a>4.7 设置元素等待</h2><p>WebDirverWait(driver, 5, 0.5)<br>WebDirverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)</p>\n<ul>\n<li>driver:浏览器驱动</li>\n<li>timeout：超时时长</li>\n<li>poll_frequency:间隔时长</li>\n<li>ignored_exceptions:超时后的异常信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from selenium.webdriver.common.by import By</div><div class=\"line\">from selenium.webdriver.support.ui import WebDriverWait</div><div class=\"line\">from selenium.webdriver.support import expected_conditions as EC</div><div class=\"line\">from selenium.webdriver.common.keys import Keys</div><div class=\"line\">import time</div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.get(&quot;https://www.baidu.com&quot;)</div><div class=\"line\"></div><div class=\"line\">element = WebDriverWait(driver, 5, 0.5).until(</div><div class=\"line\">    EC.presence_of_all_elements_located((By.ID, &quot;kw&quot;))</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(&apos;selenium&apos;)</div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.ENTER)</div><div class=\"line\"># element.send_keys(&apos;selenium&apos;)</div><div class=\"line\">time.sleep(5)</div><div class=\"line\">driver.quit()</div><div class=\"line\"></div><div class=\"line\"># until(method, message=&apos;&apos;) 调用该方法提供的驱动程序作为一个参数，直到返回为True</div></pre></td></tr></table></figure>\n<p>第二种方法：<br>隐式等待 implicitly_wait()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from selenium.common.exceptions import NoSuchElementException</div><div class=\"line\">from time import ctime</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.implicitly_wait(10)  # 休眠时间</div><div class=\"line\">driver.get(&quot;http://www.baidu.com&quot;)</div><div class=\"line\">try:</div><div class=\"line\">    print(ctime())</div><div class=\"line\">    driver.find_element_by_id(&quot;kw22&quot;).send_keys(&apos;selenium&apos;)</div><div class=\"line\">except NoSuchElementException as e:</div><div class=\"line\">    print(e)</div><div class=\"line\">finally:</div><div class=\"line\">    print(ctime())</div><div class=\"line\">    driver.quit()</div></pre></td></tr></table></figure>\n<p>第三种方法：<br>sleep<br>from time import sleep<br>sleep(10)</p>\n<h2 id=\"4-8-复选\"><a href=\"#4-8-复选\" class=\"headerlink\" title=\"4.8 复选\"></a>4.8 复选</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">import os, time</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">file_path = &apos;file:///&apos; + os.path.abspath(&apos;checkbox.html&apos;)  # abspath()返回绝对路径</div><div class=\"line\">driver.get(file_path)</div><div class=\"line\"></div><div class=\"line\"># inputs = driver.find_element_by_tag_name(&apos;input&apos;)</div><div class=\"line\"># </div><div class=\"line\"># for i in inputs:</div><div class=\"line\">#     if i.get_attribute(&apos;type&apos;) == &apos;checkbox&apos;:</div><div class=\"line\">#         i.click()</div><div class=\"line\">#         time.sleep(1)</div><div class=\"line\"></div><div class=\"line\"># checkboxs = driver.find_elements_by_xpath(&quot;//input[@type=&apos;checkbox&apos;]&quot;)</div><div class=\"line\">checkboxs = driver.find_elements_by_css_selector(&quot;input[type=checkbox]&quot;)</div><div class=\"line\"></div><div class=\"line\">for checkbox in checkboxs:</div><div class=\"line\">    checkbox.click()</div><div class=\"line\">    time.sleep(1)</div><div class=\"line\"></div><div class=\"line\">driver.find_elements_by_css_selector(&apos;input[type=checkbox]&apos;).pop().click()  # 去掉最后一个</div><div class=\"line\"></div><div class=\"line\"># pop(0) 第一个</div><div class=\"line\"># pop(-1) 最后一个</div><div class=\"line\"># pop(1) 第二个</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h2 id=\"4-9-多表单切换\"><a href=\"#4-9-多表单切换\" class=\"headerlink\" title=\"4.9 多表单切换\"></a>4.9 多表单切换</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">driver.switch_to.frame(&quot;if&quot;)  # 切换到id = if的frame框架，frame()可以去id或者name属性 或者</div><div class=\"line\">xf = driver.find_element_by_xpath(&quot;//*[@class=&apos;if&apos;]&quot;)</div><div class=\"line\">driver.switch_to.frame(xf)</div><div class=\"line\">switch_to.default_content()  # 跳到最外层表单</div></pre></td></tr></table></figure>\n<h2 id=\"4-10-多窗口切换\"><a href=\"#4-10-多窗口切换\" class=\"headerlink\" title=\"4.10 多窗口切换\"></a>4.10 多窗口切换</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.implicitly_wait(10)</div><div class=\"line\">driver.get(&quot;http://www.baidu.com&quot;)</div><div class=\"line\"></div><div class=\"line\"># 获得百度搜索窗口句柄</div><div class=\"line\">sreach_windows = driver.current_window_handle</div><div class=\"line\"># a.lb:nth-child(7)</div><div class=\"line\"># html body div#wrapper div#head div.head_wrapper div#u1 a.lb</div><div class=\"line\"></div><div class=\"line\"># a_links = driver.find_element_by_css_selector(&quot;a.lb:nth-child(7)&quot;)</div><div class=\"line\"># print a_links.text</div><div class=\"line\"></div><div class=\"line\"># links = driver.find_elements_by_link_text(&apos;登录&apos;)</div><div class=\"line\"># print links</div><div class=\"line\"></div><div class=\"line\">driver.find_elements_by_link_text(&apos;登录&apos;).pop().click()</div><div class=\"line\">driver.find_element_by_link_text(&quot;立即注册&quot;).click()</div><div class=\"line\"></div><div class=\"line\"># driver.find_element_by_link_text(&apos;登录&apos;).click()</div><div class=\"line\"># driver.find_element_by_link_text(&quot;立即注册&quot;).click()</div><div class=\"line\"></div><div class=\"line\"># 获得当前所有打开的窗口的句柄</div><div class=\"line\">all_handles = driver.window_handles</div><div class=\"line\"></div><div class=\"line\"># 进入注册窗口</div><div class=\"line\">for handle in all_handles:</div><div class=\"line\">    if handle != sreach_windows:</div><div class=\"line\">        driver.switch_to.window(handle)</div><div class=\"line\">        print &apos;now register window!&apos;</div><div class=\"line\">        driver.find_element_by_name(&quot;account&quot;).send_keys(&apos;username&apos;)</div><div class=\"line\">        driver.find_element_by_name(&quot;password&quot;).send_keys(&apos;password&apos;)</div><div class=\"line\">        time.sleep(2)</div><div class=\"line\"></div><div class=\"line\"># 回到搜索窗口</div><div class=\"line\">for handle in all_handles:</div><div class=\"line\">    if handle == sreach_windows:</div><div class=\"line\">        print &apos;now sreach window&apos;</div><div class=\"line\">        driver.find_element_by_id(&apos;TANGRAM__PSP_2__closeBtn&apos;).click()</div><div class=\"line\">        driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;selenium&quot;)</div><div class=\"line\">        driver.find_element_by_id(&quot;su&quot;).click()</div><div class=\"line\">        print driver.current_window_handle</div><div class=\"line\">        time.sleep(5)</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h2 id=\"4-11-警告框处理\"><a href=\"#4-11-警告框处理\" class=\"headerlink\" title=\"4.11 警告框处理\"></a>4.11 警告框处理</h2><p>switch_to_alert()方法 定位到 alert/confirm/prompt<br>text/accept/dismiss/send_keys等方法进行操作<br>命令|效果<br>:-|:-<br>text|返回alert/confirm/prompt中的文字<br>accpet()|接受现有警告框<br>dismiss()|解散现有警告框<br>send_keys(keysToSend)|发送文本至警告框 keysToSend:将文本发送至警告框<br>switch_to_alert()|方法接受弹出来的窗口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from selenium.webdriver.common.action_chains import ActionChains</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.implicitly_wait(10)</div><div class=\"line\">driver.get(&quot;http://www.baidu.com&quot;)</div><div class=\"line\"></div><div class=\"line\"># 鼠标悬停至“设置”链接</div><div class=\"line\"># link = driver.find_element_by_link_text(&apos;设置&apos;)</div><div class=\"line\">link = driver.find_elements_by_link_text(&apos;设置&apos;).pop()</div><div class=\"line\">ActionChains(driver).move_to_element(link).perform()</div><div class=\"line\"></div><div class=\"line\"># 打开搜索设置</div><div class=\"line\"># time.sleep(5)</div><div class=\"line\"># print driver.find_element_by_link_text(&apos;搜索设置&apos;)</div><div class=\"line\">driver.find_element_by_link_text(&apos;搜索设置&apos;).click()</div><div class=\"line\"></div><div class=\"line\">js = &quot;var q=document.getElementsByClassName(\\&quot;bdlayer pfpanel\\&quot;);q.style=\\&quot;display: block; top: 0px; opacity: 1;\\&quot;&quot;</div><div class=\"line\">driver.execute_script(js)</div><div class=\"line\">time.sleep(3)</div><div class=\"line\"></div><div class=\"line\"># res = driver.find_element_by_css_selector(&quot;.bdlayer.pfpanel&quot;)</div><div class=\"line\"># print res</div><div class=\"line\"># print res.is_displayed()</div><div class=\"line\"></div><div class=\"line\"># 设置</div><div class=\"line\">driver.find_element_by_css_selector(&quot;#sh_1&quot;).click()</div><div class=\"line\"></div><div class=\"line\"># 保存设置</div><div class=\"line\"># driver.find_element_by_class_name(&quot;prefpanelgo&quot;).click()</div><div class=\"line\">driver.find_element_by_css_selector(&quot;.prefpanelgo&quot;).click()</div><div class=\"line\"># driver.find_element_by_link_text(&apos;恢复默认&apos;).click()</div><div class=\"line\">time.sleep(2)</div><div class=\"line\"></div><div class=\"line\"># 接受警告框</div><div class=\"line\">driver.switch_to_alert().accept()</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure></p>\n<h2 id=\"4-12\"><a href=\"#4-12\" class=\"headerlink\" title=\"4.12\"></a>4.12</h2><h3 id=\"4-12-1-send-keys实现上传\"><a href=\"#4-12-1-send-keys实现上传\" class=\"headerlink\" title=\"4.12.1 send_keys实现上传\"></a>4.12.1 send_keys实现上传</h3><p>找到对应的input标签，直接send_keys(文件),传入对应文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">import os</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.implicitly_wait(5)</div><div class=\"line\">file_path = &apos;file:///&apos; + os.path.abspath(&apos;upfile.html&apos;)</div><div class=\"line\">driver.get(file_path)</div><div class=\"line\"></div><div class=\"line\"># 定位上传的input，添加本地文件</div><div class=\"line\">driver.find_element_by_name(&apos;file&apos;).send_keys(&apos;D:\\\\upload_file.txt&apos;)</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-12-2-AutoIt实现上传\"><a href=\"#4-12-2-AutoIt实现上传\" class=\"headerlink\" title=\"4.12.2 AutoIt实现上传\"></a>4.12.2 AutoIt实现上传</h3><p>官方下载地址：<a href=\"http://www.aotuitscript.com/site/\" target=\"_blank\" rel=\"external\">http://www.aotuitscript.com/site/</a><br>windows GUI(图形用户界面)自动化测试</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AutoIt Windows Info</td>\n<td style=\"text-align:left\">用于识别Windows控件信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Compile Script to.exe</td>\n<td style=\"text-align:left\">用于将AutoIt生成exe执行文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Run Script</td>\n<td style=\"text-align:left\">用于执行AutoIt脚本</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SciTE Script Editor</td>\n<td style=\"text-align:left\">用于编写AutoIt脚本</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-13-下载文件\"><a href=\"#4-13-下载文件\" class=\"headerlink\" title=\"4.13 下载文件\"></a>4.13 下载文件</h3><p>WebDriver允许我们设置默认的文件下载路径，也就是说，文件会自动下载并且存放到设置的目录中。<br>HTTP Content-type 常用对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"external\">http://tool.oschina.net/commons</a><br>curl -I 可以查看Content-type的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">import os</div><div class=\"line\"></div><div class=\"line\">fp = webdriver.FirefoxProfile()</div><div class=\"line\"></div><div class=\"line\">fp.set_preference(&quot;browser.download.folderList&quot;, 2)  # 设置成0代表保存在默认的浏览器下载目录，设置2代表保存在指定的目录</div><div class=\"line\">fp.set_preference(&quot;browser.download.manager.showWhenStarting&quot;, False)  # 是否显示开始 True为显示，False为不显示</div><div class=\"line\">fp.set_preference(&quot;browser.download.dir&quot;, &apos;/home/wy/&apos;)</div><div class=\"line\"># fp.set_preference(&quot;browser.download.dir&quot;, os.getcwd())  # 设置下载目录 os.getcwd()当前的目录</div><div class=\"line\">fp.set_preference(&quot;browser.helperApps.neverAsk.saveToDisk&quot;, &quot;application/octet-stream&quot;)  # 下载文件的类型 指定要下载页面的Content-type值，‘application/octet-stream’为文件类型</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox(firefox_profile=fp)</div><div class=\"line\">driver.get(&quot;https://pypi.python.org/pypi/selenium#downloads&quot;)</div><div class=\"line\"># driver.find_element_by_css_selector(&quot;.button.green&quot;).click()</div><div class=\"line\"># driver.find_element_by_partial_link_text(&quot;selenium-2&quot;).click()</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_css_selector(&quot;.even&gt;td&gt;span&gt;a&quot;).click()</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure></p>\n<p>Chrome浏览器类似，设置其options：<br>download.default_directory：设置下载路径<br>profile.default_content_settings.popups：设置为 0 禁止弹出窗口<br>它的设置就简单多了，看个示例：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"># -*- coding: utf-8 -*-</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from time import sleep</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">options = webdriver.ChromeOptions()</div><div class=\"line\">prefs = &#123;&apos;profile.default_content_settings.popups&apos;: 0, &apos;download.default_directory&apos;: &apos;d:\\\\&apos;&#125;</div><div class=\"line\">options.add_experimental_option(&apos;prefs&apos;, prefs)</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Chrome(executable_path=&apos;D:\\\\chromedriver.exe&apos;, chrome_options=options)</div><div class=\"line\">driver.get(&apos;http://sahitest.com/demo/saveAs.htm&apos;)</div><div class=\"line\">driver.find_element_by_xpath(&apos;//a[text()=&quot;testsaveas.zip&quot;]&apos;).click()</div><div class=\"line\">sleep(3)</div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h3 id=\"4-14-操作Cookie\"><a href=\"#4-14-操作Cookie\" class=\"headerlink\" title=\"4.14 操作Cookie\"></a>4.14 操作Cookie</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">get_cookies()</td>\n<td style=\"text-align:left\">获得所有cookie信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get_cookie(name)</td>\n<td style=\"text-align:left\">返回字典的key为”name”的cookie信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">add_cookie(cookie_dict)</td>\n<td style=\"text-align:left\">添加cookie ‘cookie_dict’指字典对象，必须有name和value值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_cookie(name,optionsString)</td>\n<td style=\"text-align:left\">删除cookie信息 “name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">delete_all_cookies()</td>\n<td style=\"text-align:left\">删除所有cookie信息</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.implicitly_wait(3)</div><div class=\"line\"></div><div class=\"line\"># 添加cookie</div><div class=\"line\">driver.add_cookie(&#123;&apos;name&apos;: &apos;key-aaa&apos;, &apos;value&apos;: &apos;key-bbb&apos;&#125;)</div><div class=\"line\"></div><div class=\"line\">driver.get(&quot;http://www.youdao.com&quot;)</div><div class=\"line\"></div><div class=\"line\"># 获得cookie信息</div><div class=\"line\">cookies = driver.get_cookies()</div><div class=\"line\"></div><div class=\"line\">print cookies</div><div class=\"line\"></div><div class=\"line\">for cookie in cookies:</div><div class=\"line\">    print cookie[&apos;name&apos;], &apos;-&gt;&apos;, cookie[&apos;value&apos;]</div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h3 id=\"4-15-调用JavaScript\"><a href=\"#4-15-调用JavaScript\" class=\"headerlink\" title=\"4.15 调用JavaScript\"></a>4.15 调用JavaScript</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from time import sleep</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.get(&quot;http://www.baidu.com&quot;)</div><div class=\"line\"></div><div class=\"line\"># 设置浏览器窗口大小</div><div class=\"line\">driver.set_window_size(600, 600)</div><div class=\"line\"></div><div class=\"line\"># 搜索</div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;selenium&quot;)</div><div class=\"line\">driver.find_element_by_id(&quot;su&quot;).click()</div><div class=\"line\">sleep(2)</div><div class=\"line\"></div><div class=\"line\"># 通过JS设置浏览器窗口的滚动条位置</div><div class=\"line\">js = &quot;window.scrollTo(100,450)&quot;</div><div class=\"line\">driver.execute_script(js)</div><div class=\"line\">sleep(3)</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h3 id=\"4-16-处理HTML5的视频播放\"><a href=\"#4-16-处理HTML5的视频播放\" class=\"headerlink\" title=\"4.16 处理HTML5的视频播放\"></a>4.16 处理HTML5的视频播放</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from time import sleep</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.implicitly_wait(5)</div><div class=\"line\">driver.get(&quot;http://videojs.com/&quot;)</div><div class=\"line\"></div><div class=\"line\">video = driver.find_element_by_xpath(&quot;.//*[@id=&apos;preview-player_html5_api&apos;]&quot;)</div><div class=\"line\"># video = driver.find_element_by_xpath(&quot;body/Section[1]/div/video&quot;)</div><div class=\"line\"></div><div class=\"line\"># 返回播放文件地址</div><div class=\"line\">url = driver.execute_script(&quot;return arguments[0].currentSrc;&quot;, video)</div><div class=\"line\">print url</div><div class=\"line\"></div><div class=\"line\"># 播放视频</div><div class=\"line\">print &quot;start&quot;</div><div class=\"line\">driver.execute_script(&quot;return arguments[0].play()&quot;, video)</div><div class=\"line\"></div><div class=\"line\">sleep(15)</div><div class=\"line\"></div><div class=\"line\"># 暂停视频</div><div class=\"line\">print &quot;pause&quot;</div><div class=\"line\">driver.execute_script(&quot;arguments[0].pause()&quot;, video)</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h3 id=\"4-17-窗口截图\"><a href=\"#4-17-窗口截图\" class=\"headerlink\" title=\"4.17 窗口截图\"></a>4.17 窗口截图</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\"></div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">from time import sleep</div><div class=\"line\"></div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.get(&apos;http://www.baidu.com&apos;)</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium&apos;)</div><div class=\"line\">driver.find_element_by_id(&apos;su&apos;).click()</div><div class=\"line\">sleep(2)</div><div class=\"line\"></div><div class=\"line\"># 截取当前窗口，并指定截图保存位置</div><div class=\"line\">driver.get_screenshot_as_file(&quot;/home/wy/&quot;)</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure>\n<h3 id=\"4-18-关闭窗口\"><a href=\"#4-18-关闭窗口\" class=\"headerlink\" title=\"4.18 关闭窗口\"></a>4.18 关闭窗口</h3><p>driver.close()</p>\n<h3 id=\"4-19-验证码的处理\"><a href=\"#4-19-验证码的处理\" class=\"headerlink\" title=\"4.19 验证码的处理\"></a>4.19 验证码的处理</h3><ol>\n<li>叫开发人员去掉验证码</li>\n<li>设置万能验证码</li>\n<li>Python-tesseract光学识别 Tesseract OCR引擎的封装类</li>\n<li>记录 cookie 绕过验证码</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ...</div><div class=\"line\"># 访问某网站...</div><div class=\"line\"></div><div class=\"line\">driver.get(&quot;http://xxx.com&quot;)</div><div class=\"line\"></div><div class=\"line\">driver.add_cookie(&#123;&apos;name&apos;:&apos;Login_UserNumber&apos;,&apos;value&apos;:&apos;username&apos;&#125;)</div><div class=\"line\">driver.add_cookie(&#123;&apos;name&apos;:&apos;Login_Password&apos;,&apos;value&apos;:&apos;password&apos;&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"4-20-WebDriver原理\"><a href=\"#4-20-WebDriver原理\" class=\"headerlink\" title=\"4.20 WebDriver原理\"></a>4.20 WebDriver原理</h3><ol>\n<li>WebDriver启动浏览器，绑定指定端口，作为Remote Server</li>\n<li>Client 通过CommandExcuter发送HTTPRequest给Remote Server帧听端口</li>\n<li>Remote Server需要依赖原声的浏览器组件 转化浏览器的native调用</li>\n</ol>\n<p>接收客户端DEBUG<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"># coding:utf-8</div><div class=\"line\">from selenium import webdriver</div><div class=\"line\">import logging</div><div class=\"line\"></div><div class=\"line\">logging.basicConfig(level=logging.DEBUG)</div><div class=\"line\">driver = webdriver.Firefox()</div><div class=\"line\">driver.get(&quot;http://www.baidu.com&quot;)</div><div class=\"line\"></div><div class=\"line\">driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;selenium&quot;)</div><div class=\"line\">driver.find_element_by_id(&quot;su&quot;).click()</div><div class=\"line\"></div><div class=\"line\">driver.quit()</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-自动化测试模型\"><a href=\"#5-自动化测试模型\" class=\"headerlink\" title=\"5. 自动化测试模型\"></a>5. 自动化测试模型</h1><p>测试模型：</p>\n<ol>\n<li>线性测试</li>\n<li>模块化驱动测试</li>\n<li>数据驱动测试</li>\n<li>关键字测试</li>\n</ol>\n<h2 id=\"5-1-自动化测试模型介绍\"><a href=\"#5-1-自动化测试模型介绍\" class=\"headerlink\" title=\"5.1 自动化测试模型介绍\"></a>5.1 自动化测试模型介绍</h2><h3 id=\"5-1-1-线性测试\"><a href=\"#5-1-1-线性测试\" class=\"headerlink\" title=\"5.1.1 线性测试\"></a>5.1.1 线性测试</h3><p>通过录制或编写对应用程序的操作步骤产生相应的线性脚本，每个测试脚本相对独立，且不产生其他依赖与调用，这是早期的自动化测试的形式，<br>单纯的模拟用户完整的操作场景，优势完整独立，缺点开发和维护的成本很高</p>\n<h3 id=\"5-1-2-模块化测试\"><a href=\"#5-1-2-模块化测试\" class=\"headerlink\" title=\"5.1.2 模块化测试\"></a>5.1.2 模块化测试</h3><p>把重复的操作独立成公共模块，当用例执行过程中用到这一个模块时，则被调用，最大限度的消除了重复，提高可维护性</p>\n<h3 id=\"5-1-3-数据驱动测试\"><a href=\"#5-1-3-数据驱动测试\" class=\"headerlink\" title=\"5.1.3 数据驱动测试\"></a>5.1.3 数据驱动测试</h3><p>数据驱动说的直白一点就是数据的参数化，因为输入数据的不同而引起不同的输出结果 Datapool</p>\n<h3 id=\"5-1-4-关键字驱动\"><a href=\"#5-1-4-关键字驱动\" class=\"headerlink\" title=\"5.1.4 关键字驱动\"></a>5.1.4 关键字驱动</h3><p>无法是把”数据”换成”关键字”，通过关键字的改变引起测试结果的改变<br>目前市面上的典型关键字驱动工具 QTP(目前已更名UFT-Unified Functional Testing)、Robot Framework(RIDE)工具为主<br>这类工具封装了底层的代码，提供用户独立的图形界面，以”填表格”的形式免除测试人员对写代码的恐惧，从而减低编写难度</p>\n<h1 id=\"6-selenium-IDE\"><a href=\"#6-selenium-IDE\" class=\"headerlink\" title=\"6. selenium IDE\"></a>6. selenium IDE</h1><p>不用翻墙的 安装地址：<a href=\"https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/\" target=\"_blank\" rel=\"external\">https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/</a></p>\n<h1 id=\"7-unittest-单元测试框架\"><a href=\"#7-unittest-单元测试框架\" class=\"headerlink\" title=\"7. unittest 单元测试框架\"></a>7. unittest 单元测试框架</h1><h1 id=\"8-自动化测试高级应用\"><a href=\"#8-自动化测试高级应用\" class=\"headerlink\" title=\"8. 自动化测试高级应用\"></a>8. 自动化测试高级应用</h1><h1 id=\"9-Selenium-Grid2\"><a href=\"#9-Selenium-Grid2\" class=\"headerlink\" title=\"9. Selenium Grid2\"></a>9. Selenium Grid2</h1><h1 id=\"10-Python多线程\"><a href=\"#10-Python多线程\" class=\"headerlink\" title=\"10. Python多线程\"></a>10. Python多线程</h1><h1 id=\"11-自动化测试实战\"><a href=\"#11-自动化测试实战\" class=\"headerlink\" title=\"11. 自动化测试实战\"></a>11. 自动化测试实战</h1><ul>\n<li>mztestpro/目录<ul>\n<li>bbs/    论坛项目<ul>\n<li>data/    存放测试数据</li>\n<li>report/    用于存放HTML测试报告<ul>\n<li>image/    创建了image目录用于存放测试过程中的截图</li>\n</ul>\n</li>\n<li>test_case/    测试用例目录，用于存放测试用例及相关模块<ul>\n<li>models/    该目录下存放了一些公共的配置函数及公共类<ul>\n<li>driver.py </li>\n<li>function.py</li>\n<li>myunit.py</li>\n</ul>\n</li>\n<li>page_obj/        该目录用于存放测试用例的页面对象(Page Object)，根据自定义规则，以“*Page.py”命名的文件为封装的页面对象文件<ul>\n<li>*Page.py</li>\n</ul>\n</li>\n<li><em>_sta.py     测试用例文件。根据测试文件匹配规则，”</em>_sta.py“命名的文件将被当作自动化测试用例执行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>driver/</li>\n<li>package/</li>\n<li>run_bbs_test.py</li>\n<li>startup.bat</li>\n<li>自动化测试项目说明文档.md</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"12-BDD框架指Lettuce入门\"><a href=\"#12-BDD框架指Lettuce入门\" class=\"headerlink\" title=\"12. BDD框架指Lettuce入门\"></a>12. BDD框架指Lettuce入门</h1><h1 id=\"13-GitHub托管项目\"><a href=\"#13-GitHub托管项目\" class=\"headerlink\" title=\"13. GitHub托管项目\"></a>13. GitHub托管项目</h1><h1 id=\"14-持续继承Jenkins入门\"><a href=\"#14-持续继承Jenkins入门\" class=\"headerlink\" title=\"14. 持续继承Jenkins入门\"></a>14. 持续继承Jenkins入门</h1>","categories":[],"tags":[]},{"title":"手把手教你github搭建个人博客","url":"http://yoursite.com/2017/06/13/手把手教你github搭建个人博客/","content":"<p>本文是 记录了 Ubuntu16.04 下 通过 Hexo + GitHub 搭建的博客的完整记录，希望大家可以耐心阅读下。</p>\n<p>最开始的时候，都是把自己的技术文档、安装攻略，整理到云笔记上，但是后来，云笔记渐渐的不好用了 ，主要原因还是因为他们都开始通过各种方式收费或者限制了，我用过 印象、有道、为知 等等，当我一次次的迁徙我的笔记的时候，就是我一次次的跳入一个坑。当然，我是支持云笔记收费的，只是他们还不到让我买账的程度，因为他们在收费后与之前相比，并没有变的更好用。但是，我知道总有一天，我还是会为他们买单的，当他们可以在Linux系统下运行的时候，期待中吧：）</p>\n<p>目录流程：</p>\n<p>[TOC]</p>\n<h2 id=\"1-搭建-Node-js-环境\"><a href=\"#1-搭建-Node-js-环境\" class=\"headerlink\" title=\"1. 搭建 Node.js 环境\"></a>1. 搭建 Node.js 环境</h2><p>为什么要搭建 Node.js 环境？ - 因为 Hexo 博客系统是基于 Node.js 编写的</p>\n<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p>\n<p><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js官网</a>：下载安装包 v6.10.3LTS(下载最新的即可)<a href=\"https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.xz\" target=\"_blank\" rel=\"external\">这是我下载的安装包的地址</a></p>\n<p>步骤：</p>\n<p>Windows 安装</p>\n<p>保持默认设置即可，一路Next，安装很快就结束了，然后打开命令提示符win + R，输入</p>\n<ol>\n<li><blockquote>\n<p>node -v</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>npm -v</p>\n</blockquote>\n</li>\n</ol>\n<p>出现版本号则说明 Node.js 环境配置成功，第一步完成！！！</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-7522dbe127fbd1fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>Ubuntu安装</p>\n<p>我是通过浏览器下载到 （/home/wy/下载），你们可以找到相应的位置（如果位置与你们的有出入可以做相应修改）：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-978afc21a56aa177.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ol>\n<li><blockquote>\n<p>tar zxvf ~/下载/node-v6.10.3-linux-x64.tar.xz -C /opt</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>cd /opt/node-v6.10.3-linux-x64/</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>./node -v</p>\n</blockquote>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-6802cc3c09f784fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"> </p>\n</li>\n<li><blockquote>\n<p>ln -s /opt/node-v6.10.3-linux-x64/bin/node /usr/local/bin/node</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>ln -s /opt/node-v6.10.3-linux-x64/bin/npm /usr/local/bin/npm</p>\n</blockquote>\n</li>\n</ol>\n<p>意思就是创建软链接，在/usr/local/bin里，就可以全局使用</p>\n<p>还有一种就是shell提示的apt-get方式，我之前就被这种方式坑了。。。强烈不推荐啊</p>\n<p>另一种：</p>\n<ol>\n<li><blockquote>\n<p>sudo apt-get install nodejs</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>sudo apt-get install npm</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>node -v</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>npm -v</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2-搭建-Git-环境\"><a href=\"#2-搭建-Git-环境\" class=\"headerlink\" title=\"2. 搭建 Git 环境\"></a>2. 搭建 Git 环境</h2><p>为什么要搭建 Git 环境？ - 因为需要把本地的网页和文章等提交到 GitHub 上。</p>\n<p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p><a href=\"http://www.runoob.com/git/git-install-setup.html\" target=\"_blank\" rel=\"external\">git的安装配置</a></p>\n<p><a href=\"http://www.jianshu.com/p/dc90b9aac18c\" target=\"_blank\" rel=\"external\">Git安装教程</a></p>\n<p><a href=\"https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"external\">GitHub - 账户的创建和配置</a></p>\n<p>在Ubuntu上安装git</p>\n<ol>\n<li><blockquote>\n<p>sudo apt-get update</p>\n<p>sudo apt-get install git</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config –global user.name “your name”</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config –global user.email “your email”</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config –global push.default simple  # 每次push仅push当前分支</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config –global core.autocrlffalse  # 忽略window/unix换行符</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config –global gui.encoding utf-8  # 避免乱码</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config –global core.quotepath off  # 避免git status显示的中文文件名乱码</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git –version  # 版本</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config–globalmerge.tool vimdiff  # 差异分析工具</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git config –list  # 查看配置信息</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>ssh-keygen -t rsa -C “your email”</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>ssh-add ~/.ssh/id_rsa  # github用的公钥就在~/.ssh/id_rsa.pub</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"3-GitHub-注册和配置\"><a href=\"#3-GitHub-注册和配置\" class=\"headerlink\" title=\"3. GitHub 注册和配置\"></a>3. GitHub 注册和配置</h2><p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。</p>\n<p>Github注册：<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">https://github.com/</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-53ce8d7ea0817c35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<ol>\n<li><blockquote>\n<p>选择 New repository</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>Repository name 必须选择 相应的格式 “yourname.github.io”</p>\n</blockquote>\n<p> 点击绿色按钮 Create repository 创建<br> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-c42cd1e1fd2e8578.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</li>\n<li><blockquote>\n<p>点击 Settings 完成相应配置</p>\n</blockquote>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-310894e2777e8fbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</li>\n<li><blockquote>\n<p>选择 Deploy keys 选项,配置ssh秘钥</p>\n</blockquote>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-fca9a9db15b49601.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</li>\n<li><blockquote>\n<p>点击 Add deploy key,添加相应秘钥</p>\n</blockquote>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-170e6e0a52af8c97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</li>\n<li><blockquote>\n<p>添加内容 ,title 随便写,key 需要在你的本地查看</p>\n</blockquote>\n<p> 打开终端,输入:</p>\n<blockquote>\n<p>vim ~/.ssh/id_rsa.pub</p>\n</blockquote>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-0fabc6342c6e477a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p> 鼠标右键复制所有内容,到 github刚才配置秘钥页面的 key 里</p>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-194d2fa997c505d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p> 完成内容如下,并点击 Add key</p>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-83b0eabdfdd7a84c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n</li>\n<li><blockquote>\n<p>最后测试:  输入  ssh git@github.com</p>\n</blockquote>\n<p> 如果最后出现,</p>\n<p> ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access</p>\n<p> Connection to github.com closed.</p>\n<p> 说明配置成功</p>\n</li>\n</ol>\n<h2 id=\"4-安装配置-Hexo\"><a href=\"#4-安装配置-Hexo\" class=\"headerlink\" title=\"4. 安装配置 Hexo\"></a>4. 安装配置 Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<p>强烈建议你花20分钟区读一读 Hexo 的官方文档：<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/</a></p>\n<ol>\n<li><p>如果之前node.js 安装配置正确的话,可以运行如下命令:</p>\n<p> <img src=\"http://upload-images.jianshu.io/upload_images/6298250-311c09a2eb7466f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p> 当然命令需要变通一下,不能完全按照下边的执行</p>\n</li>\n</ol>\n<pre><code>在Linux终端 输入 cd ~\n\n进入你的Home目录\n</code></pre><ol>\n<li><p>npm install hexo-cli -g   # 这一步是通过必备的node.js安装成功后,既可以用npm安装</p>\n<p> 安装成功后,会装在 /opt/node-v6.10.3-linux-x64/bin 这个目录</p>\n<p> 下边的命令,需要hexo全局使用,这里创建软链接 :</p>\n<p> ln -s /opt/node-v6.10.3-linux-x64/bin/hexo /usr/local/bin/hexo</p>\n<p> 这里完成才可以执行第三部</p>\n</li>\n<li><p>hexo init bigjeffwang.github.io</p>\n<p> 我这里是在 Home目录执行安装初始化 先 cd ~ 进入Home目录,在执行</p>\n</li>\n<li><p>cd bigjeffwang.github.io</p>\n</li>\n<li><p>npm install</p>\n</li>\n<li><p>hexo server</p>\n</li>\n</ol>\n<h2 id=\"5-关联Hexo与GitHub-Pages\"><a href=\"#5-关联Hexo与GitHub-Pages\" class=\"headerlink\" title=\"5. 关联Hexo与GitHub Pages\"></a>5. 关联Hexo与GitHub Pages</h2><p>基本到这里,完成第5部,算是安装完成,因为之前的github的配置,会关联github</p>\n<p>可能需要注意的几点:</p>\n<p>在使用npm 安装 Hexo：在命令行中输入npm install hexo-cli -g</p>\n<p>然后你将会看到下图，可能你会看到一个</p>\n<p>WARN</p>\n<p>，但是不用担心，这不会影响你的正常使用。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-f53c5875bfd8b22e.JPEG&amp;access=215967316?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>查看Hexo的版本hexo version</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-478e58faaa20e65f.JPEG&amp;access=215967316?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后在进行hexo相关配置:</p>\n<p>打开 你本地项目里的 vim _config.yml</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-c6f68a03bcfb7a20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>_config.yml配置参考</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-cc524789ea634828.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>需要改一下 你的 标题 author作者 等等,按照你的意愿,下边有许多可以改的地方,请参考hexo的 <a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-89677e673fc92f6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>最后在文档的最后,  deploy 需要改一下,一定要注意 文档格式 所有的: 后边都必须有空格!!!</p>\n<p>type 设置 git</p>\n<p>repository 设置 你github上的项目的 克隆地址 这里一定不要用https:// 开头的地址,因为这样还是需要账户密码登录,后期维护麻烦,之前设置github秘钥,也是为了方便这里,用ssh的地址方式 git@github.com:后边接你的名字+/项目地址</p>\n<p>branch 分支就设置master就可以</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-fc73891ea5804372.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<p>安装一个扩展 这个很有用 如下:</p>\n<p>npm install hexo-deployer-git –save  # 它可以让你代替git, push你的博客项目</p>\n<p>hexo new “hello world” 这样可以创建你的一篇博客 安装扩展后</p>\n<p>hexo g  # 执行这个,就可以编译你的项目,当然这是简写,完整是 hexo generate</p>\n<p>hexo d  # 同样 执行这个,就可以部署你的项目,并推送到github上了</p>\n<p>项目里的source/_post 这个目录,就是你生成和存放文档的目录</p>\n<p>在浏览器中输入 <a href=\"https://bigjeffwang.github.io\" target=\"_blank\" rel=\"external\">https://bigjeffwang.github.io</a> （用户名当然改成你的）看到了 Hexo 与 GitHub Pages 已经成功关联了，哇哇哇哇哇哇，开心死你了，不要忘了回来给我点赞哟 ~</p>\n<p>下边设置,修改hexo主题</p>\n<p>在 _config.yml 里边有一项是  theme:  它后边接的就是你的主题</p>\n<p>这里需要如下步骤:</p>\n<ol>\n<li><p>进入你的博客项目的themes</p>\n<p> cd ~/bigjeffwang.github.io/themes</p>\n</li>\n<li><p>从github上克隆一个 别人的主题  这里提供一下别人的主题链接,以供参考 <a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">hexo主题</a></p>\n<blockquote>\n<p>git clone <a href=\"https://github.com/wuchong/jacman.git\" target=\"_blank\" rel=\"external\">https://github.com/wuchong/jacman.git</a> ./jacman</p>\n<p>cd ./jacman</p>\n<p>git pull</p>\n</blockquote>\n</li>\n</ol>\n<p>jacman 里边 也是有 _config.yml ,里边怎么修改,需要你自己琢磨,大同小异.请参考 <a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>当然,你也可以自己优化,相当于一个简单的web项目,里边也有JS CSS IMG 目录,可以替换相应你喜欢的图片</p>\n<p>最后别忘了,修改你项目里的_config.yml,替换你的主题的文件夹名字</p>\n<p>我这里是 jacman</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/6298250-60e163ffa362f0e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\"></p>\n<h2 id=\"6-多个git账号，该如何设置\"><a href=\"#6-多个git账号，该如何设置\" class=\"headerlink\" title=\"6. 多个git账号，该如何设置\"></a>6. 多个git账号，该如何设置</h2><p>这里懒得写,借用一下,别人总结好的 <a href=\"http://www.linuxidc.com/Linux/2016-05/131079.htm\" target=\"_blank\" rel=\"external\">原作者文档</a></p>\n<p>场景：使用github的时候，大家都知道需要给该账号添加一个SSH key才能访问，参考 <a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"external\">具体设置</a>。当然如果你在多台机器使用一个账户，你可以为该账户添加多个SSH key。由于github是使用SSH key的fingerprint来判定你是哪个账户，而不是通过用户名，这样你就可以在设置完之后，在本地直接执行下面的语句，它就会自动使用你的.ssh/id_rsa.pub所对应的账户进行登陆，然后执行相关命令。</p>\n<ol>\n<li><blockquote>\n<p>本地建库</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git init</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git commit -am”first commit’</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>push到github上去</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git remote add origin git@github.com:xxxx/test.git</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>git push origin master</p>\n</blockquote>\n</li>\n</ol>\n<p>但是如果你想在一台机器使用两个github账号（比如私人账号和工作用账号）。这个时候怎么指定push到哪个账号的test仓库上去呢？</p>\n<p>解决方案（假设你已经拥有私有账号且已经OK，现在想使用另一个工作用账号）：</p>\n<ol>\n<li><p>为工作账号生成SSH Key</p>\n<blockquote>\n<p>ssh-keygen -t rsa -C”your-email-address”#存储key的时候，不要覆盖现有的id_rsa，使用一个新的名字，比如id_rsa_work</p>\n</blockquote>\n</li>\n<li><p>把id_rsa_work.pub加到你的work账号上</p>\n</li>\n<li><p>把该key加到ssh agent上。由于不是使用默认的.ssh/id_rsa，所以你需要显示告诉ssh agent你的新key的位置</p>\n<blockquote>\n<p>ssh-add ~/.ssh/id_rsa_work#可以通过ssh-add -l来确认结果</p>\n</blockquote>\n</li>\n<li><p>配置.ssh/config</p>\n<blockquote>\n<p>vi .ssh/config#加上以下内容#default githubHost github.com</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">HostName github.com</div><div class=\"line\"></div><div class=\"line\">\tIdentityFile~/.ssh/id_rsa</div><div class=\"line\"></div><div class=\"line\">\tHost github_work</div><div class=\"line\"></div><div class=\"line\">\tHostName github.com</div><div class=\"line\"></div><div class=\"line\">\tIdentityFile~/.ssh/id_rsa_work</div></pre></td></tr></table></figure>\n<ol>\n<li><p>这样的话，你就可以通过使用github.com别名github_work来明确说你要是使用id_rsa_work的SSH key来连接github，即使用工作账号进行操作。</p>\n<p> 本地建库: </p>\n<blockquote>\n<p>git init</p>\n<p>git commit-am”first commit’#push到github上去$ git remote add origin git@github_work:xxxx/test.git</p>\n<p>git push origin master</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"7-Hexo-的常用操作\"><a href=\"#7-Hexo-的常用操作\" class=\"headerlink\" title=\"7. Hexo 的常用操作\"></a>7. Hexo 的常用操作</h2><p><a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"external\">官方文档</a>建议看看</p>\n<p>你可以执行下列命令来创建一篇新文章。</p>\n<blockquote>\n<p>hexo new [文章名]</p>\n</blockquote>\n<p>您可以在命令中指定文章的布局（layout），默认为post，可以通过修改_config.yml中的default_layout参数来指定默认布局。</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/writing.html#%E5%B8%83%E5%B1%80%EF%BC%88Layout%EF%BC%89\" target=\"_blank\" rel=\"external\">布局</a>（Layout）</p>\n<p>Hexo 有三种默认布局：post、page和draft，它们分别对应不同的路径，而您自定义的其他布局和post相同，都将储存到source/_posts文件夹。</p>\n<p>布局路径</p>\n<blockquote>\n<p>postsource/_posts</p>\n<p>pagesource</p>\n<p>draftsource/_drafts</p>\n</blockquote>\n<p>不要处理我的文章</p>\n<p>如果你不想你的文章被处理，你可以将 Front-Matter 中的layout:设为false。</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/writing.html#%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0\" target=\"_blank\" rel=\"external\">文件名称</a></p>\n<p>Hexo 默认以标题做为文件名称，但您可编辑new_post_name参数来改变默认的文件名称，举例来说，设为:year-:month-:day-:title.md可让您更方便的通过日期来管理文章。</p>\n<p>变量描述</p>\n<p>:title标题（小写，空格将会被替换为短杠）</p>\n<p>:year建立的年份，比如，2015</p>\n<p>:month建立的月份（有前导零），比如，04</p>\n<p>:i_month建立的月份（无前导零），比如，4</p>\n<p>:day建立的日期（有前导零），比如，07</p>\n<p>:i_day建立的日期（无前导零），比如，7</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/writing.html#%E8%8D%89%E7%A8%BF\" target=\"_blank\" rel=\"external\">草稿</a></p>\n<p>刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到source/_drafts文件夹，您可通过publish命令将草稿移动到source/_posts文件夹，该命令的使用方式与new十分类似，您也可在命令中指定layout来指定布局。</p>\n<p>$ hexo publish [layout]</p>\n<p>草稿默认不会显示在页面中，您可在执行时加上–draft参数，或是把render_drafts参数设为true来预览草稿。</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/writing.html#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89\" target=\"_blank\" rel=\"external\">模版（Scaffold）</a></p>\n<p>在新建文章时，Hexo 会根据scaffolds文件夹内相对应的文件来建立文件，例如：</p>\n<p>$ hexo new photo”My Gallery”</p>\n<p>在执行这行指令时，Hexo 会尝试在scaffolds文件夹中寻找photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>\n<p>变量描述</p>\n<p>layout布局</p>\n<p>title标题</p>\n<p>date文件建立日期</p>\n<p>Markdown 11种基本语法</p>\n<p>引用自<a href=\"http://www.cnblogs.com/hnrainll/p/3514637.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/hnrainll/p/3514637.html</a></p>\n<ol>\n<li>标题设置（让字体变大，和word的标题意思一样）</li>\n</ol>\n<p>在Markdown当中设置标题，有两种方式：</p>\n<p>第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。</p>\n<p>第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p>\n<ol>\n<li>块注释（blockquote）</li>\n</ol>\n<p>通过在文字开头添加“&gt;”表示块注释。（当&gt;和文字之间添加五个blank时，块注释的文字会有变化。）</p>\n<ol>\n<li>斜体</li>\n</ol>\n<p>将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</p>\n<ol>\n<li>粗体</li>\n</ol>\n<p>将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</p>\n<ol>\n<li>无序列表</li>\n</ol>\n<p>在文字开头添加(<em>,+, and-)实现无序列表。但是要注意在(</em>,+, and-)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</p>\n<ol>\n<li>有序列表</li>\n</ol>\n<p>使用数字后面跟上句号。（还要有空格）</p>\n<ol>\n<li>链接（Links）</li>\n</ol>\n<p>Markdown中有两种方式，实现链接，分别为内联方式和引用方式。</p>\n<p>内联方式：This is an <a href=\"http://example.com/\" target=\"_blank\" rel=\"external\">example link</a>.</p>\n<p>引用方式：</p>\n<p>I get 10 times more traffic from <a href=\"http://google.com/\" title=\"Google\" target=\"_blank\" rel=\"external\">Google</a> than from <a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\" target=\"_blank\" rel=\"external\">Yahoo</a> or <a href=\"http://search.msn.com/\" title=\"MSN Search\" target=\"_blank\" rel=\"external\">MSN</a>.</p>\n<ol>\n<li>图片（Images）</li>\n</ol>\n<p>图片的处理方式和链接的处理方式，非常的类似。</p>\n<p>内联方式：<img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\"></p>\n<p>引用方式：</p>\n<p><img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\"></p>\n<ol>\n<li>代码（HTML中所谓的Code）</li>\n</ol>\n<p>实现方式有两种：</p>\n<p>第一种：简单文字出现一个代码框。使用`</p>\n<p><code>。（</code>不是单引号而是左上角的ESC下面~中的`）</p>\n<p>第二种：大片文字需要实现代码框。使用Tab和四个空格。</p>\n<ol>\n<li>脚注（footnote）</li>\n</ol>\n<p>实现方式如下：</p>\n<p>hello<a href=\"hi\">^hello</a></p>\n<ol>\n<li>下划线</li>\n</ol>\n<p>在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题）</p>\n<h2 id=\"8-结束语\"><a href=\"#8-结束语\" class=\"headerlink\" title=\"8. 结束语\"></a>8. 结束语</h2><p>深夜仓促总结的,因为之前已经安装过,所以过程,有些,就不方便截图,实在懒得从新装了,但是基本保证没漏洞,少了部分截图,也绝对可以顺利安装.文章里少部分摘抄了别人的总结,基本我全都放出了原文的链接.对于我转载的原作者,而没有署名的,本着以分享的目的,请多多见谅,哈哈.</p>\n<p>最后的最后,我啰里啰嗦的写了一大堆,如果你仔细看完了,并且安装成功了,那么恭喜你加入了这个集体.</p>\n<p>愿大家都能写出有质量的技术博客,分享于众吧!</p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"<p>about:</p>\n<ul>\n<li>type: me<br>icon: icon-user<br>text_value:<ul>\n<li>“Scut，1991，Spring.”</li>\n<li>“喜欢编程，喜欢睡懒觉.”</li>\n<li>“开发工程师，常用 Python/HTML / CSS / JavaScript.”</li>\n</ul>\n</li>\n<li>type: Github<br>icon: icon-github<br>text_key: Github<br>text_value: “@forsigner”<br>text_value_url: <a href=\"https://github.com/BigJeffWang\" target=\"_blank\" rel=\"external\">https://github.com/BigJeffWang</a></li>\n<li>type: weibo<br>icon: icon-weibo<br>text_key: 微博<br>text_value: “@forsigner”<br>text_value_url: <a href=\"http://weibo.com/u/1847075964\" target=\"_blank\" rel=\"external\">http://weibo.com/u/1847075964</a></li>\n<li>type: mail<br>icon: icon-mail<br>text_key: mail<br>text_value: “bigjeffwang@163.com”</li>\n<li>type: location<br>icon: icon-location<br>text_value: 北京</li>\n</ul>\n","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/personal-style.css","content":"@font-face {\n  font-family: \"Meiryo\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\nhtml.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/source/images/bg.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\ngoogle_analytics:\nbaidu_analytics:\ndisqus_shortname: forsigner\n# duoshuo_shortname: forsigner\n","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"<p>project:</p>\n<ul>\n<li>type: personal<br>name: mztestpro<br>url: <a href=\"https://github.com/BigJeffWang/mztestpro\" target=\"_blank\" rel=\"external\">https://github.com/BigJeffWang/mztestpro</a><br>intro: An automated test project</li>\n</ul>\n","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]